/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen 1.5.1
 **/

#ifndef __visualization_msgs_InteractiveMarker_hpp__
#define __visualization_msgs_InteractiveMarker_hpp__

#include <lcm/lcm_coretypes.h>

#include <string>
#include <vector>
#include "std_msgs/Header.hpp"
#include "geometry_msgs/Pose.hpp"
#include "visualization_msgs/MenuEntry.hpp"
#include "visualization_msgs/InteractiveMarkerControl.hpp"

namespace visualization_msgs
{

class InteractiveMarker
{
    public:
        int32_t    menu_entries_length;

        int32_t    controls_length;

        std_msgs::Header header;

        geometry_msgs::Pose pose;

        std::string name;

        std::string description;

        float      scale;

        /**
         * LCM Type: visualization_msgs.MenuEntry[menu_entries_length]
         */
        std::vector< visualization_msgs::MenuEntry > menu_entries;

        /**
         * LCM Type: visualization_msgs.InteractiveMarkerControl[controls_length]
         */
        std::vector< visualization_msgs::InteractiveMarkerControl > controls;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "InteractiveMarker"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int InteractiveMarker::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int InteractiveMarker::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int InteractiveMarker::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t InteractiveMarker::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* InteractiveMarker::getTypeName()
{
    return "InteractiveMarker";
}

int InteractiveMarker::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->menu_entries_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->controls_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->header._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->pose._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    char* name_cstr = const_cast<char*>(this->name.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &name_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* description_cstr = const_cast<char*>(this->description.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &description_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->scale, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->menu_entries_length; a0++) {
        tlen = this->menu_entries[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->controls_length; a0++) {
        tlen = this->controls[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int InteractiveMarker::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->menu_entries_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->controls_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->header._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->pose._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    int32_t __name_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__name_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__name_len__ > maxlen - pos) return -1;
    this->name.assign(
        static_cast<const char*>(buf) + offset + pos, __name_len__ - 1);
    pos += __name_len__;

    int32_t __description_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__description_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__description_len__ > maxlen - pos) return -1;
    this->description.assign(
        static_cast<const char*>(buf) + offset + pos, __description_len__ - 1);
    pos += __description_len__;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->scale, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->menu_entries.resize(this->menu_entries_length);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->menu_entries_length; a0++) {
        tlen = this->menu_entries[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    try {
        this->controls.resize(this->controls_length);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->controls_length; a0++) {
        tlen = this->controls[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int InteractiveMarker::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += this->header._getEncodedSizeNoHash();
    enc_size += this->pose._getEncodedSizeNoHash();
    enc_size += this->name.size() + 4 + 1;
    enc_size += this->description.size() + 4 + 1;
    enc_size += __float_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->menu_entries_length; a0++) {
        enc_size += this->menu_entries[a0]._getEncodedSizeNoHash();
    }
    for (int a0 = 0; a0 < this->controls_length; a0++) {
        enc_size += this->controls[a0]._getEncodedSizeNoHash();
    }
    return enc_size;
}

uint64_t InteractiveMarker::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == InteractiveMarker::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, InteractiveMarker::getHash };

    uint64_t hash = 0xe9ed8e5f9a72545fLL +
         std_msgs::Header::_computeHash(&cp) +
         geometry_msgs::Pose::_computeHash(&cp) +
         visualization_msgs::MenuEntry::_computeHash(&cp) +
         visualization_msgs::InteractiveMarkerControl::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
