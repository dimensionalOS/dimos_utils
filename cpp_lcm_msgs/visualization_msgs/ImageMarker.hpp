/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen 1.5.1
 **/

#ifndef __visualization_msgs_ImageMarker_hpp__
#define __visualization_msgs_ImageMarker_hpp__

#include <lcm/lcm_coretypes.h>

#include <string>
#include <vector>
#include "std_msgs/Header.hpp"
#include "geometry_msgs/Point.hpp"
#include "std_msgs/ColorRGBA.hpp"
#include "std_msgs/ColorRGBA.hpp"
#include "std_msgs/Duration.hpp"
#include "geometry_msgs/Point.hpp"
#include "std_msgs/ColorRGBA.hpp"

namespace visualization_msgs
{

class ImageMarker
{
    public:
        int32_t    points_length;

        int32_t    outline_colors_length;

        std_msgs::Header header;

        std::string ns;

        int32_t    id;

        int32_t    type;

        int32_t    action;

        geometry_msgs::Point position;

        float      scale;

        std_msgs::ColorRGBA outline_color;

        uint8_t    filled;

        std_msgs::ColorRGBA fill_color;

        std_msgs::Duration lifetime;

        /**
         * LCM Type: geometry_msgs.Point[points_length]
         */
        std::vector< geometry_msgs::Point > points;

        /**
         * LCM Type: std_msgs.ColorRGBA[outline_colors_length]
         */
        std::vector< std_msgs::ColorRGBA > outline_colors;

    public:
        // If you're using C++11 and are getting compiler errors saying
        // things like ‘constexpr’ needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   CIRCLE = 0;
        // If you're using C++11 and are getting compiler errors saying
        // things like ‘constexpr’ needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   LINE_STRIP = 1;
        // If you're using C++11 and are getting compiler errors saying
        // things like ‘constexpr’ needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   LINE_LIST = 2;
        // If you're using C++11 and are getting compiler errors saying
        // things like ‘constexpr’ needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   POLYGON = 3;
        // If you're using C++11 and are getting compiler errors saying
        // things like ‘constexpr’ needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   POINTS = 4;
        // If you're using C++11 and are getting compiler errors saying
        // things like ‘constexpr’ needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   ADD = 0;
        // If you're using C++11 and are getting compiler errors saying
        // things like ‘constexpr’ needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   REMOVE = 1;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "ImageMarker"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int ImageMarker::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int ImageMarker::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ImageMarker::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t ImageMarker::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* ImageMarker::getTypeName()
{
    return "ImageMarker";
}

int ImageMarker::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->points_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->outline_colors_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->header._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    char* ns_cstr = const_cast<char*>(this->ns.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &ns_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->id, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->type, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->action, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->position._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->scale, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->outline_color._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->filled, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->fill_color._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->lifetime._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->points_length; a0++) {
        tlen = this->points[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->outline_colors_length; a0++) {
        tlen = this->outline_colors[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int ImageMarker::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->points_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->outline_colors_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->header._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    int32_t __ns_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__ns_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__ns_len__ > maxlen - pos) return -1;
    this->ns.assign(
        static_cast<const char*>(buf) + offset + pos, __ns_len__ - 1);
    pos += __ns_len__;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->id, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->type, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->action, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->position._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->scale, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->outline_color._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->filled, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->fill_color._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->lifetime._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->points.resize(this->points_length);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->points_length; a0++) {
        tlen = this->points[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    try {
        this->outline_colors.resize(this->outline_colors_length);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->outline_colors_length; a0++) {
        tlen = this->outline_colors[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int ImageMarker::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += this->header._getEncodedSizeNoHash();
    enc_size += this->ns.size() + 4 + 1;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += this->position._getEncodedSizeNoHash();
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += this->outline_color._getEncodedSizeNoHash();
    enc_size += __byte_encoded_array_size(NULL, 1);
    enc_size += this->fill_color._getEncodedSizeNoHash();
    enc_size += this->lifetime._getEncodedSizeNoHash();
    for (int a0 = 0; a0 < this->points_length; a0++) {
        enc_size += this->points[a0]._getEncodedSizeNoHash();
    }
    for (int a0 = 0; a0 < this->outline_colors_length; a0++) {
        enc_size += this->outline_colors[a0]._getEncodedSizeNoHash();
    }
    return enc_size;
}

uint64_t ImageMarker::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == ImageMarker::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, ImageMarker::getHash };

    uint64_t hash = 0x3a3ea371b474d924LL +
         std_msgs::Header::_computeHash(&cp) +
         geometry_msgs::Point::_computeHash(&cp) +
         std_msgs::ColorRGBA::_computeHash(&cp) +
         std_msgs::ColorRGBA::_computeHash(&cp) +
         std_msgs::Duration::_computeHash(&cp) +
         geometry_msgs::Point::_computeHash(&cp) +
         std_msgs::ColorRGBA::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
