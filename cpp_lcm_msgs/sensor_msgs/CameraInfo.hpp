/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen 1.5.1
 **/

#ifndef __sensor_msgs_CameraInfo_hpp__
#define __sensor_msgs_CameraInfo_hpp__

#include <lcm/lcm_coretypes.h>

#include <string>
#include <vector>
#include "std_msgs/Header.hpp"
#include "sensor_msgs/RegionOfInterest.hpp"

namespace sensor_msgs
{

class CameraInfo
{
    public:
        int32_t    D_length;

        std_msgs::Header header;

        int32_t    height;

        int32_t    width;

        std::string distortion_model;

        /**
         * LCM Type: double[D_length]
         */
        std::vector< double > D;

        /**
         * LCM Type: double[9]
         */
        double     K[9];

        /**
         * LCM Type: double[9]
         */
        double     R[9];

        /**
         * LCM Type: double[12]
         */
        double     P[12];

        int32_t    binning_x;

        int32_t    binning_y;

        sensor_msgs::RegionOfInterest roi;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "CameraInfo"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int CameraInfo::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int CameraInfo::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int CameraInfo::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t CameraInfo::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* CameraInfo::getTypeName()
{
    return "CameraInfo";
}

int CameraInfo::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->D_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->header._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->height, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->width, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* distortion_model_cstr = const_cast<char*>(this->distortion_model.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &distortion_model_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->D_length > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->D[0], this->D_length);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->K[0], 9);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->R[0], 9);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->P[0], 12);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->binning_x, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->binning_y, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->roi._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int CameraInfo::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->D_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->header._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->height, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->width, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    int32_t __distortion_model_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__distortion_model_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__distortion_model_len__ > maxlen - pos) return -1;
    this->distortion_model.assign(
        static_cast<const char*>(buf) + offset + pos, __distortion_model_len__ - 1);
    pos += __distortion_model_len__;

    if(this->D_length) {
        this->D.resize(this->D_length);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->D[0], this->D_length);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->K[0], 9);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->R[0], 9);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->P[0], 12);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->binning_x, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->binning_y, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->roi._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int CameraInfo::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += this->header._getEncodedSizeNoHash();
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += this->distortion_model.size() + 4 + 1;
    enc_size += __double_encoded_array_size(NULL, this->D_length);
    enc_size += __double_encoded_array_size(NULL, 9);
    enc_size += __double_encoded_array_size(NULL, 9);
    enc_size += __double_encoded_array_size(NULL, 12);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += this->roi._getEncodedSizeNoHash();
    return enc_size;
}

uint64_t CameraInfo::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == CameraInfo::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, CameraInfo::getHash };

    uint64_t hash = 0xb4ea6258bc6d0702LL +
         std_msgs::Header::_computeHash(&cp) +
         sensor_msgs::RegionOfInterest::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
