/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen 1.5.1
 **/

#ifndef __foxglove_msgs_SceneEntity_hpp__
#define __foxglove_msgs_SceneEntity_hpp__

#include <lcm/lcm_coretypes.h>

#include <string>
#include <vector>
#include "builtin_interfaces/Time.hpp"
#include "builtin_interfaces/Duration.hpp"
#include "foxglove_msgs/KeyValuePair.hpp"
#include "foxglove_msgs/ArrowPrimitive.hpp"
#include "foxglove_msgs/CubePrimitive.hpp"
#include "foxglove_msgs/SpherePrimitive.hpp"
#include "foxglove_msgs/CylinderPrimitive.hpp"
#include "foxglove_msgs/LinePrimitive.hpp"
#include "foxglove_msgs/TriangleListPrimitive.hpp"
#include "foxglove_msgs/TextPrimitive.hpp"
#include "foxglove_msgs/ModelPrimitive.hpp"

namespace foxglove_msgs
{

class SceneEntity
{
    public:
        int32_t    metadata_length;

        int32_t    arrows_length;

        int32_t    cubes_length;

        int32_t    spheres_length;

        int32_t    cylinders_length;

        int32_t    lines_length;

        int32_t    triangles_length;

        int32_t    texts_length;

        int32_t    models_length;

        builtin_interfaces::Time timestamp;

        std::string frame_id;

        std::string id;

        builtin_interfaces::Duration lifetime;

        int8_t     frame_locked;

        /**
         * LCM Type: foxglove_msgs.KeyValuePair[metadata_length]
         */
        std::vector< foxglove_msgs::KeyValuePair > metadata;

        /**
         * LCM Type: foxglove_msgs.ArrowPrimitive[arrows_length]
         */
        std::vector< foxglove_msgs::ArrowPrimitive > arrows;

        /**
         * LCM Type: foxglove_msgs.CubePrimitive[cubes_length]
         */
        std::vector< foxglove_msgs::CubePrimitive > cubes;

        /**
         * LCM Type: foxglove_msgs.SpherePrimitive[spheres_length]
         */
        std::vector< foxglove_msgs::SpherePrimitive > spheres;

        /**
         * LCM Type: foxglove_msgs.CylinderPrimitive[cylinders_length]
         */
        std::vector< foxglove_msgs::CylinderPrimitive > cylinders;

        /**
         * LCM Type: foxglove_msgs.LinePrimitive[lines_length]
         */
        std::vector< foxglove_msgs::LinePrimitive > lines;

        /**
         * LCM Type: foxglove_msgs.TriangleListPrimitive[triangles_length]
         */
        std::vector< foxglove_msgs::TriangleListPrimitive > triangles;

        /**
         * LCM Type: foxglove_msgs.TextPrimitive[texts_length]
         */
        std::vector< foxglove_msgs::TextPrimitive > texts;

        /**
         * LCM Type: foxglove_msgs.ModelPrimitive[models_length]
         */
        std::vector< foxglove_msgs::ModelPrimitive > models;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "SceneEntity"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int SceneEntity::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int SceneEntity::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int SceneEntity::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t SceneEntity::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* SceneEntity::getTypeName()
{
    return "SceneEntity";
}

int SceneEntity::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->metadata_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->arrows_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->cubes_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->spheres_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->cylinders_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->lines_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->triangles_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->texts_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->models_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->timestamp._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    char* frame_id_cstr = const_cast<char*>(this->frame_id.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &frame_id_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* id_cstr = const_cast<char*>(this->id.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &id_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->lifetime._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->frame_locked, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->metadata_length; a0++) {
        tlen = this->metadata[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->arrows_length; a0++) {
        tlen = this->arrows[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->cubes_length; a0++) {
        tlen = this->cubes[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->spheres_length; a0++) {
        tlen = this->spheres[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->cylinders_length; a0++) {
        tlen = this->cylinders[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->lines_length; a0++) {
        tlen = this->lines[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->triangles_length; a0++) {
        tlen = this->triangles[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->texts_length; a0++) {
        tlen = this->texts[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->models_length; a0++) {
        tlen = this->models[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int SceneEntity::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->metadata_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->arrows_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->cubes_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->spheres_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->cylinders_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->lines_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->triangles_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->texts_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->models_length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->timestamp._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    int32_t __frame_id_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__frame_id_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__frame_id_len__ > maxlen - pos) return -1;
    this->frame_id.assign(
        static_cast<const char*>(buf) + offset + pos, __frame_id_len__ - 1);
    pos += __frame_id_len__;

    int32_t __id_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__id_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__id_len__ > maxlen - pos) return -1;
    this->id.assign(
        static_cast<const char*>(buf) + offset + pos, __id_len__ - 1);
    pos += __id_len__;

    tlen = this->lifetime._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->frame_locked, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->metadata.resize(this->metadata_length);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->metadata_length; a0++) {
        tlen = this->metadata[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    try {
        this->arrows.resize(this->arrows_length);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->arrows_length; a0++) {
        tlen = this->arrows[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    try {
        this->cubes.resize(this->cubes_length);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->cubes_length; a0++) {
        tlen = this->cubes[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    try {
        this->spheres.resize(this->spheres_length);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->spheres_length; a0++) {
        tlen = this->spheres[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    try {
        this->cylinders.resize(this->cylinders_length);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->cylinders_length; a0++) {
        tlen = this->cylinders[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    try {
        this->lines.resize(this->lines_length);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->lines_length; a0++) {
        tlen = this->lines[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    try {
        this->triangles.resize(this->triangles_length);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->triangles_length; a0++) {
        tlen = this->triangles[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    try {
        this->texts.resize(this->texts_length);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->texts_length; a0++) {
        tlen = this->texts[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    try {
        this->models.resize(this->models_length);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->models_length; a0++) {
        tlen = this->models[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int SceneEntity::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += this->timestamp._getEncodedSizeNoHash();
    enc_size += this->frame_id.size() + 4 + 1;
    enc_size += this->id.size() + 4 + 1;
    enc_size += this->lifetime._getEncodedSizeNoHash();
    enc_size += __boolean_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->metadata_length; a0++) {
        enc_size += this->metadata[a0]._getEncodedSizeNoHash();
    }
    for (int a0 = 0; a0 < this->arrows_length; a0++) {
        enc_size += this->arrows[a0]._getEncodedSizeNoHash();
    }
    for (int a0 = 0; a0 < this->cubes_length; a0++) {
        enc_size += this->cubes[a0]._getEncodedSizeNoHash();
    }
    for (int a0 = 0; a0 < this->spheres_length; a0++) {
        enc_size += this->spheres[a0]._getEncodedSizeNoHash();
    }
    for (int a0 = 0; a0 < this->cylinders_length; a0++) {
        enc_size += this->cylinders[a0]._getEncodedSizeNoHash();
    }
    for (int a0 = 0; a0 < this->lines_length; a0++) {
        enc_size += this->lines[a0]._getEncodedSizeNoHash();
    }
    for (int a0 = 0; a0 < this->triangles_length; a0++) {
        enc_size += this->triangles[a0]._getEncodedSizeNoHash();
    }
    for (int a0 = 0; a0 < this->texts_length; a0++) {
        enc_size += this->texts[a0]._getEncodedSizeNoHash();
    }
    for (int a0 = 0; a0 < this->models_length; a0++) {
        enc_size += this->models[a0]._getEncodedSizeNoHash();
    }
    return enc_size;
}

uint64_t SceneEntity::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == SceneEntity::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, SceneEntity::getHash };

    uint64_t hash = 0xe143d679579f0ab0LL +
         builtin_interfaces::Time::_computeHash(&cp) +
         builtin_interfaces::Duration::_computeHash(&cp) +
         foxglove_msgs::KeyValuePair::_computeHash(&cp) +
         foxglove_msgs::ArrowPrimitive::_computeHash(&cp) +
         foxglove_msgs::CubePrimitive::_computeHash(&cp) +
         foxglove_msgs::SpherePrimitive::_computeHash(&cp) +
         foxglove_msgs::CylinderPrimitive::_computeHash(&cp) +
         foxglove_msgs::LinePrimitive::_computeHash(&cp) +
         foxglove_msgs::TriangleListPrimitive::_computeHash(&cp) +
         foxglove_msgs::TextPrimitive::_computeHash(&cp) +
         foxglove_msgs::ModelPrimitive::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
