#!/usr/bin/env python3
"""
Script to fix internal imports in the autogenerated LCM Python files.

The issue is that the autogenerated code uses absolute imports (e.g., 'import geometry_msgs')
but when imported as 'lcm_msgs.geometry_msgs', these imports don't resolve correctly.

This script modifies all Python files in the lcm_msgs directory to use relative imports.
"""

import os
import re
from pathlib import Path

# Message packages to update imports for
MSG_PACKAGES = [
    "sensor_msgs",
    "geometry_msgs", 
    "std_msgs",
    "actionlib_msgs",
    "builtin_interfaces",
    "diagnostic_msgs", 
    "foxglove_msgs",
    "nav_msgs",
    "shape_msgs",
    "stereo_msgs",
    "tf2_msgs",
    "trajectory_msgs",
    "visualization_msgs",
]

def fix_file_imports(file_path):
    """Fix import statements in a file."""
    with open(file_path, 'r') as f:
        content = f.read()

    updated = False
    
    # Get the package name from the file path
    pkg_name = None
    for pkg in MSG_PACKAGES:
        if pkg in str(file_path):
            pkg_name = pkg
            break
            
    if not pkg_name:
        return False

    # Replace direct imports with relative imports
    for pkg in MSG_PACKAGES:
        # If the file imports a package directly (import pkg_name)
        if pkg == pkg_name:
            # Change 'import pkg_name' to 'from . import *'
            pattern = fr'\nimport\s+{pkg}\s*\n'
            if re.search(pattern, content):
                content = re.sub(pattern, '\nfrom . import *\n', content)
                updated = True
                
            # Replace pkg_name.ClassName() with just ClassName()
            pattern = fr'{pkg}\.\w+'
            matches = re.findall(pattern, content)
            for match in matches:
                class_name = match.split('.')[1]
                content = content.replace(match, class_name)
                updated = True
        else:
            # For cross-package imports (e.g., geometry_msgs importing std_msgs)
            pattern = fr'\nimport\s+{pkg}\s*\n'
            if re.search(pattern, content):
                content = re.sub(pattern, f'\nfrom lcm_msgs import {pkg}\n', content)
                updated = True

    if updated:
        print(f"Fixed imports in {file_path}")
        with open(file_path, 'w') as f:
            f.write(content)
        return True
    return False

def main():
    """Main function."""
    # Find the lcm_msgs directory
    script_dir = Path(os.path.dirname(os.path.abspath(__file__)))
    lcm_msgs_dir = script_dir / 'lcm_msgs'
    
    if not lcm_msgs_dir.exists() or not lcm_msgs_dir.is_dir():
        print(f"Error: lcm_msgs directory not found at {lcm_msgs_dir}")
        return
    
    # Find all Python files in the lcm_msgs directory
    python_files = list(lcm_msgs_dir.glob('**/*.py'))
    
    # Fix the import statements in each file
    fixed_count = 0
    for file_path in python_files:
        if fix_file_imports(file_path):
            fixed_count += 1
    
    print(f"Fixed imports in {fixed_count} files.")

if __name__ == '__main__':
    main()