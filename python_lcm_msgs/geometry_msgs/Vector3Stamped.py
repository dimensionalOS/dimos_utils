"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import geometry_msgs

import std_msgs

class Vector3Stamped(object):

    __slots__ = ["header", "vector"]

    __typenames__ = ["std_msgs.Header", "geometry_msgs.Vector3"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.header = std_msgs.Header()
        """ LCM Type: std_msgs.Header """
        self.vector = geometry_msgs.Vector3()
        """ LCM Type: geometry_msgs.Vector3 """

    def encode(self):
        buf = BytesIO()
        buf.write(Vector3Stamped._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        assert self.vector._get_packed_fingerprint() == geometry_msgs.Vector3._get_packed_fingerprint()
        self.vector._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Vector3Stamped._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Vector3Stamped._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = Vector3Stamped()
        self.header = std_msgs.Header._decode_one(buf)
        self.vector = geometry_msgs.Vector3._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if Vector3Stamped in parents: return 0
        newparents = parents + [Vector3Stamped]
        tmphash = (0xecb8cfd985d1cbe0+ std_msgs.Header._get_hash_recursive(newparents)+ geometry_msgs.Vector3._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if Vector3Stamped._packed_fingerprint is None:
            Vector3Stamped._packed_fingerprint = struct.pack(">Q", Vector3Stamped._get_hash_recursive([]))
        return Vector3Stamped._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Vector3Stamped._get_packed_fingerprint())[0]

