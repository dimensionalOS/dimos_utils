"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import geometry_msgs

import std_msgs

class TwistWithCovarianceStamped(object):

    __slots__ = ["header", "twist"]

    __typenames__ = ["std_msgs.Header", "geometry_msgs.TwistWithCovariance"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.header = std_msgs.Header()
        """ LCM Type: std_msgs.Header """
        self.twist = geometry_msgs.TwistWithCovariance()
        """ LCM Type: geometry_msgs.TwistWithCovariance """

    def encode(self):
        buf = BytesIO()
        buf.write(TwistWithCovarianceStamped._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        assert self.twist._get_packed_fingerprint() == geometry_msgs.TwistWithCovariance._get_packed_fingerprint()
        self.twist._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != TwistWithCovarianceStamped._get_packed_fingerprint():
            raise ValueError("Decode error")
        return TwistWithCovarianceStamped._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = TwistWithCovarianceStamped()
        self.header = std_msgs.Header._decode_one(buf)
        self.twist = geometry_msgs.TwistWithCovariance._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if TwistWithCovarianceStamped in parents: return 0
        newparents = parents + [TwistWithCovarianceStamped]
        tmphash = (0xf01245422c7b28c2+ std_msgs.Header._get_hash_recursive(newparents)+ geometry_msgs.TwistWithCovariance._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if TwistWithCovarianceStamped._packed_fingerprint is None:
            TwistWithCovarianceStamped._packed_fingerprint = struct.pack(">Q", TwistWithCovarianceStamped._get_hash_recursive([]))
        return TwistWithCovarianceStamped._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", TwistWithCovarianceStamped._get_packed_fingerprint())[0]

