"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class JointTrajectoryPoint(object):

    __slots__ = ["positions_length", "velocities_length", "accelerations_length", "effort_length", "positions", "velocities", "accelerations", "effort", "time_from_start"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "int32_t", "double", "double", "double", "double", "int64_t"]

    __dimensions__ = [None, None, None, None, ["positions_length"], ["velocities_length"], ["accelerations_length"], ["effort_length"], None]

    def __init__(self):
        self.positions_length = 0
        """ LCM Type: int32_t """
        self.velocities_length = 0
        """ LCM Type: int32_t """
        self.accelerations_length = 0
        """ LCM Type: int32_t """
        self.effort_length = 0
        """ LCM Type: int32_t """
        self.positions = []
        """ LCM Type: double[positions_length] """
        self.velocities = []
        """ LCM Type: double[velocities_length] """
        self.accelerations = []
        """ LCM Type: double[accelerations_length] """
        self.effort = []
        """ LCM Type: double[effort_length] """
        self.time_from_start = 0
        """ LCM Type: int64_t """

    def encode(self):
        buf = BytesIO()
        buf.write(JointTrajectoryPoint._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiii", self.positions_length, self.velocities_length, self.accelerations_length, self.effort_length))
        buf.write(struct.pack('>%dd' % self.positions_length, *self.positions[:self.positions_length]))
        buf.write(struct.pack('>%dd' % self.velocities_length, *self.velocities[:self.velocities_length]))
        buf.write(struct.pack('>%dd' % self.accelerations_length, *self.accelerations[:self.accelerations_length]))
        buf.write(struct.pack('>%dd' % self.effort_length, *self.effort[:self.effort_length]))
        buf.write(struct.pack(">q", self.time_from_start))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != JointTrajectoryPoint._get_packed_fingerprint():
            raise ValueError("Decode error")
        return JointTrajectoryPoint._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = JointTrajectoryPoint()
        self.positions_length, self.velocities_length, self.accelerations_length, self.effort_length = struct.unpack(">iiii", buf.read(16))
        self.positions = struct.unpack('>%dd' % self.positions_length, buf.read(self.positions_length * 8))
        self.velocities = struct.unpack('>%dd' % self.velocities_length, buf.read(self.velocities_length * 8))
        self.accelerations = struct.unpack('>%dd' % self.accelerations_length, buf.read(self.accelerations_length * 8))
        self.effort = struct.unpack('>%dd' % self.effort_length, buf.read(self.effort_length * 8))
        self.time_from_start = struct.unpack(">q", buf.read(8))[0]
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if JointTrajectoryPoint in parents: return 0
        tmphash = (0xd8632dd8f90c6ecb) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if JointTrajectoryPoint._packed_fingerprint is None:
            JointTrajectoryPoint._packed_fingerprint = struct.pack(">Q", JointTrajectoryPoint._get_hash_recursive([]))
        return JointTrajectoryPoint._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", JointTrajectoryPoint._get_packed_fingerprint())[0]

